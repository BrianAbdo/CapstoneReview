{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","_handleClick","setState","isLoading","fetch","then","res","json","result","console","log","quote","message","state","prevProps","prevState","snapshot","this","button","document","getElementById","randomColor","Math","floor","random","toString","style","backgroundColor","className","id","onClick","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"iPAiFeA,E,kDA9Eb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IA6BRC,aAAe,WACb,EAAKC,SAAS,CACZC,WAAW,IAEbC,MAAM,WACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJC,QAAQC,IAAIF,GACZ,EAAKN,SAAS,CACZS,MAAOH,EAAOI,QACdT,WAAW,QAtCjB,EAAKU,MAAQ,CACXF,MAAO,GACPR,WAAW,GAJI,E,sDAOnB,SAAmBW,EAAWC,EAAWC,GAEvC,GAAGD,EAAUJ,QAAUM,KAAKJ,MAAMF,MAC9B,CACC,IAAIO,EAASC,SAASC,eAAe,eACjCC,EAAcC,KAAKC,MAAoB,SAAdD,KAAKE,UAAmBC,SAAS,IAE9DP,EAAOQ,MAAMC,gBAAkB,IAAIN,K,+BAI1C,WAAqB,IAAD,OAElBjB,MAAM,WACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJC,QAAQC,IAAIF,GACZ,EAAKN,SAAS,CACZS,MAAOH,EAAOI,QACdT,WAAW,S,oBAmBjB,WAAS,MAiBoBc,KAAKJ,MAAzBV,EAjBA,EAiBAA,UAAWQ,EAjBX,EAiBWA,MAClB,OACE,qBAAKiB,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UAEEzB,EACE,0DAEA,4BAAIQ,IAEN,wBAAQkB,GAAG,cAAcC,QAASb,KAAKhB,aAAvC,SAAuDE,EAAY,gBAAkB,gC,GAzE7E4B,aCUHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB7B,MAAK,YAAkD,IAA/C8B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFvB,SAASC,eAAe,SAM1BY,M","file":"static/js/main.c76480ec.chunk.js","sourcesContent":["import { Component } from 'react';\nimport './App.css';\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quote: '',\n      isLoading: true\n    }\n  }\n  componentDidUpdate(prevProps, prevState, snapshot){\n\n    if(prevState.quote !== this.state.quote)\n        {\n         var button = document.getElementById(\"QuoteButton\")\n         var randomColor = Math.floor(Math.random()*16777215).toString(16);\n\n         button.style.backgroundColor = \"#\"+randomColor;\n        }\n\n  }\n  componentDidMount() {\n    // alert('This component just mounted to the DOM!');\n    fetch(\"/Random\")\n    .then(res => res.json())\n    .then(result => {\n      console.log(result);\n      this.setState({\n        quote: result.message,\n        isLoading: false\n      })\n    })\n  }\n  _handleClick = () => {\n    this.setState({\n      isLoading: true\n    })\n    fetch(\"/Random\")\n      .then(res => res.json())\n      .then(result => {\n        console.log(result);\n        this.setState({\n          quote: result.message,\n          isLoading: false\n        })\n      })\n  \n  }\n  render() {\n    // if(this.state.isLoading) {\n    //   return (<div>Loading new image</div>)\n    // } else {\n    //   return (\n    //     <div className=\"App\">\n    //       <header className=\"App-header\">\n    //         <img src={this.state.image} alt=\"logo\" />\n    //         <button onClick={this._handleClick}>Generate new Doggo</button>\n    //       </header>\n    //     </div>\n    //   );\n    // }\n    /**\n     * const isLoading = this.state.isLoading;\n     * const image = this.state.image;\n     */\n    const {isLoading, quote} = this.state;\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {\n          isLoading ? \n            <div>currently loading image</div> : \n    \n            <p>{quote}</p>\n          }\n          <button id=\"QuoteButton\" onClick={this._handleClick}>{ isLoading ? 'Loading Quote' : 'Generate new Quote' }</button>\n        </header>\n      </div>\n    );\n  }\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}